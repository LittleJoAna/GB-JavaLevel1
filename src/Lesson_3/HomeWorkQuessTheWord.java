package Lesson_3;

import java.util.Random;
import java.util.Scanner;

public class HomeWorkQuessTheWord {
    /*
    2 * Создать массив из слов String[] words = {"apple", "orange", "lemon", "banana", "apricot", "avocado", "broccoli",
"carrot", "cherry", "garlic", "grape", "melon", "leak", "kiwi", "mango", "mushroom", "nut", "olive", "pea", "peanut",
"pear", "pepper", "pineapple", "pumpkin", "potato"};
При запуске программы компьютер загадывает слово, запрашивает ответ у пользователя,
сравнивает его с загаданным словом и сообщает правильно ли ответил пользователь. Если слово не угадано, компьютер
показывает буквы которые стоят на своих местах.
apple – загаданное
apricot - ответ игрока
ap############# (15 символов, чтобы пользователь не мог узнать длину слова)
Для сравнения двух слов посимвольно, можно пользоваться:
String str = "apple";
str.charAt(0); - метод, вернет char, который стоит в слове str на первой позиции
Играем до тех пор, пока игрок не отгадает слово
Используем только маленькие буквы
     */

    //массив заданных слов, из которых выбирается случайное слово
    private static String[] words = {"apple", "orange", "lemon", "banana", "apricot", "avocado", "broccoli",
            "carrot", "cherry", "garlic", "grape", "melon", "leak", "kiwi", "mango", "mushroom", "nut", "olive", "pea",
            "peanut", "pear", "pepper", "pineapple", "pumpkin", "potato"};
    private static char[] printWord = new char[15]; //для вывода совпадающих букв
    private static Scanner sc = new Scanner(System.in); // для считывания с консоли введенных пользователем слов
    private static Random random = new Random(); //для случайного выбора слова из массива
    private static String wordAI; //для хранения загаданного компьютером слова
    private static String wordUser; //для хранения введенного пользователем слова
    private static boolean exit; //для выхода из игры
    private static int countGame; //для хранения количества сыгранных игр

    public static void main(String[] args) {
        /*
        Метод запуска игры. Сначала в консоль выводится приветствие игрока и обьяснение правил игры. Далее содержится
        цикл игры. Сначала компьютером выбирается слово, с помощью класса Random, который выбирает случайное слово из массива
        заданных слов, используя длину этого массива как максимальное значение. Далее запускается метод с циклом игры.
        После угадывания слова программа возвращается в метод main, где пользователю предлагается сыграть еще раз.
        В случае, если пользователь соглашается, введя букву Y, переменная выхода из игры инициализируется значением true
        и игра возвращается в начало цикла к операции выбора случайного слова компьютером. Если пользователь отказывается
        от продолжения игры, переменная выхода из игры инициализируется значением false и программа выходит из цикла.
        В конце игры выводится статистика о сыгранных играх. а также прощание с пользователем.
         */

        System.out.println("Приветствую тебя в игре <<Угадай слово>>!");
        System.out.println("Попробуй угадать слово, загаданное компьютером!\nЖелаю удачи!\n");
        do {
            wordAI = words[random.nextInt(words.length)];
            System.out.println("Компьютер загадал слово! ");

            runTheGame();
            System.out.println("\nХочешь сыграть еще раз? Введи Y если хочешь продолжить, введи N если хочешь закончить игру!");
            wordUser = sc.nextLine();
            if (wordUser.equals("Y")) {
                exit = true;
            } else {
                exit = false;
            }
        } while (exit);
        System.out.println("Ты сыграл(а) в игру <<Угадай слово>> " + countGame + " раз. Ты угадал(а) " + countGame +
                " слов, загаданных компьютером!");
        System.out.println("Спасибо за игру! До новых встреч!");

        sc.close();
    }

    public static void runTheGame() {
        /*
        Метод содержит цикл игры. В самом начале вызывается метод для аполнения массива символов решетками, это сделано
        для того, чтобы в случае нескольких игр подряд в массиве не сохранялись данные предыдущей игры. Далее
        происходит инкремент переменной о сыгранных играх, это сделано для подсчета статистики и вывода ее в конце игры
        пользователю. Создается переменная для записи длины слова - это сделано для того, чтобы выяснить какое слово короче,
        загаданное компьютером или введенное пользователем. Это сделано для того, чтобы цикл игры проходил по наименьшему слову
        во избежание выпадения исключения StringIndexOutOfBoundsException. В случае, если заданное слово короче, переменная
        для записи длины слова становится равной длине заданного слова, если введенное слово короче - переменная для записи
        длины слова становится равной длине введенного слова. Далее идет цикл for, в котором сравниваются посимвольно буквы
        из введенного слова и загаданного. В случае. если буквы равны - в массив символов происходит запись этой буквы в
        элемент, равный по индексу с этой буквой. Далее происходит печать массива символов для показа угаданных пользователем
        букв и их позиций в загаданном слове. Далее происходит проверка победы, если пользователель угадал слово - выводится
        поздравление о победе, если слово не угадано, тогда игра возвращается с помощью цикла do-while к операции введения
        пользоватаелм слова - пользователю предлагается ввести новое слово. Игра продолжается до тех пор пока не будет
        угадано слово.
         */
        initPrintWord();
        countGame++;
        int n;
        do {
            System.out.println("Твое слово: ");
            wordUser = sc.nextLine().toLowerCase();
            System.out.println("Ты ввел(а) слово: " + wordUser);
            if (wordAI.length() <= wordUser.length()) {
                n = wordAI.length();
            } else {
                n = wordUser.length();
            }

            for (int i = 0; i < n; i++) {
                if (wordUser.charAt(i) == wordAI.charAt(i)) {
                    printWord[i] = wordAI.charAt(i);
                }
            }
            printArrayWord();
            if (checkWin()) {
                System.out.println("\nТы угадал(а) слово! Победа!!!");
            }
        } while (!checkWin());

    }

    public static boolean checkWin() {
        /*
        Метод проверки победы. Создается переменная для хранения длины загаданного слова, а также переменная для подсчета
        букв в массиве символов. В цикле происходит проверка соответствия значений элемента массива и буквы строки
        посимвольно. В случае, если символ первого элемента массива совпадает с символом первой буквы в строке - происходит
        инкремент переменной для подсчета букв. Цикл имеет количество итераций равное длине загаданного слова. В случае,
        если переменная для подсчета букв становится равна длине загаданного слова - метод возвращает true, если
        в ходе проверки этих слов нет совпадения по длине - переменная для подсчета букв обнуляется и метод возвращает false.
         */
        int n = wordAI.length(), count = 0;
        for (int i = 0; i < n; i++) {
            if (printWord[i] == wordAI.charAt(i)) {
                count++;
            }
        }
        if (count == n) {
            return true;
        } else {
            count = 0;
        }

        return false;
    }

    public static void printArrayWord() {
        /*
        Метод для печати массива символов в консоль в виде строки
         */
        String print = "";
        for (int i = 0; i < printWord.length; i++) {
            print += printWord[i] + " ";
        }
        System.out.println(print);
    }

    private static void initPrintWord() {
        /*
        Метод для заполнения массива символов решетками в начале каждой новой игры.
         */
        for (int i = 0; i < printWord.length; i++) {
            printWord[i] = '#';
        }
    }
/*
Рефакторинг:
1. обработать с помощью исключения ввод неподходящего типа данных,
2. добавить распознавание языка клавиатуры
3. добавить в статистику вывод угаданных пользователем слов
 */
}

