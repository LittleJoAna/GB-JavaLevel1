package Lesson_3;

import java.util.Random;
import java.util.Scanner;

public class HomeWorkQuessTheNumber {
    /*
1. Написать программу, которая загадывает случайное число от 0 до 9, и пользователю дается 3 попытки угадать это число.
При каждой попытке компьютер должен сообщить больше ли указанное пользователем число чем загаданное, или меньше.
После победы или проигрыша выводится запрос – «Повторить игру еще раз? 1 – да / 0 – нет»(1 – повторить, 0 – нет).
    */
    private static boolean exit = false; //переменная для выхода из игры
    private static Scanner sc = new Scanner(System.in); //сканер для получения данных от пользователя
    private static Random random = new Random(); //для получения случайного числа
    private static int count = 0; //для подсчета попыток
    private static int attempt; //для запроса количества попыток от пользователя
    private static int number; //для хранения случайного числа
    private static int max; // для запроса максимального числа игры
    private static int answer; //для выхода из игры
    private static int countGame; //для подсчета циклов игры
    private static int countWin; //для подсчета побед
    private static int countLose; //для подсчета поражений


    public static void main(String[] args) {
        /*
        Метод запускает игру. Сначала в консоль выводится приветствие игрока. Далее пользователю предлагается ввести
        максимальное число игры, которое считывает метод nextInt с консоли в переменную max, к которой прибавляется 1 для
        того, чтобы это число тоже попадало в диапазон. Далее пользователю предлагается ввести максимальное количество
        попыток для игры, которое считывается с консоли в переменную attempt. Далее создается случайное число с учетом
        максимального введенного числа пользователем. Далее пользователю предлагается угадать число, после чего выполнение
        программы переходит в метод игры. После окончания игры выполнение программы возвращается в метод main, где
        пользователю предлагается сыграть еще раз. Далее происходит считывание с консоли ответа пользователя, который
        записывается в переменную answer. После этого идет проверка содержимого этой переменной, в случае если в переменную
        введена 1 игра продолжается, запуская цикл do-while с момента введения максимального числа игры. В случае введения
        пользователем 0 игра заканчивается. после чего выводится статистика сыгранных игр, а также побед и поражений. После
        этого закрывается поток сканера.
         */
        System.out.println("Приветствую тебя в игре <<Угадай число>>! " +
                "\nЖелаю удачи! Приступим!");
        do {
            System.out.println("\nВведи максимальное число для компьютера! " +
                    "\nОт 0 до этого числа компьютер загадает тебе число!");
            max = sc.nextInt() + 1;
            System.out.println("Введи количество попыток, с которых ты угадаешь это число!");
            attempt = sc.nextInt();
            number = random.nextInt(max);
            System.out.println("Игра началась! \nКомпьютер загадал число от 0 до " + max + "!\nТвой ход!\n");
            runTheGame();
            System.out.println("\nХочешь сыграть еще раз? Введи 1 если хочешь продолжить, введи 0 если хочешь закончить игру!");
            answer = sc.nextInt();
            if (answer == 1) {
                exit = true;
            } else {
                exit = false;
            }
        } while (exit);
        System.out.println("Ты сыграл(а) в игру <<Угадай число>> " + countGame + " раз. Из них побед - " +
                countWin + ", поражений - " + countLose);
        System.out.println("Спасибо за игру! До новых встреч!");

        sc.close();
    }

    public static void runTheGame() {
        /*
        При запуске метода сразу же происходит инкремент переменной, которая подсчитывает цикл игры, а также инициализация
        нулем переменной подсчета попыток, на случай если это не первая игра, чтобы для каждой отдельной игры попфтки считались
        заново. Далее выводится предложение ввести число для угадывания. Создается переменная а для считывания в нее значений
        с консоли. Запускается цикл for для которого условием для выхода является переменная запроса попыток, введенных
        пользователем. Далее происходит считывание с консоли введенного числа. Далее происходит проверка значения переменной
        а со случайным числом, которое загадал компьютер. В случае угадывания числа, выводится сообщение с поздравлением,
        а также статистика попыток, происходит инкремент переменной подсчета побед и выход из цикла, после чего происходит
        возвращение в метод main. В случае неугадывания, выводится сообщение со статистикой попыток. а также предложением
        ввести еще одно число. До момента, пока переменная подсчета попыток будет меньше чем переменная запроса попыток,
        введенных пользователем игра продолжается, выводится статистика попыток. Когда переменная подсчета попыток будет
        равна или больше переменной запроса попыток, игра прекращается, пользователю выводится сообщение о поражении,
        происходит инкремент переменной подсчета поражений и возвращение в метод main.
         */
        countGame++;
        count = 0;
        System.out.println("Попробуй угадать число! ");
        int a;
        for (int i = 0; i < attempt; i++) {
            a = sc.nextInt();
            count++;
            if (a == number) {
                System.out.println("Ты угадал(а) число с " + count + " попытки!");
                countWin++;
                break;

            } else if (a > 0 && a < number) {
                System.out.println("Ты не угадал(а)! \nЗагаданное число больше!");
            } else if (a > number) {
                System.out.println("Ты не угадал(а)! \nЗагаданное число меньше!");
            }
            if (count < attempt) {
                System.out.println("У тебя осталось еще " + (attempt - count) + " попыток!");
            } else {
                System.out.println("Попытки закончились! Ты проиграл(а)!");
                countLose++;
                break;
            }
        }
    }
}
